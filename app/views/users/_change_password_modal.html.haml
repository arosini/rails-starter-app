#change-password-modal.modal.fade{ role: "dialog", tabindex: "-1" }
  = form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put, 'data-parsley-validate' => '', data: { user: user_id }, id: "change-password"}, remote: true, format: :json) do |f|
    .modal-dialog
      .modal-content.col-md-10.col-centered
        .modal-header.center
          %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", type: "button"} Ã—
          %h4.modal-title= t('users.password_modal.title')
        .modal-body
          #change-password-form_errors
          .input-group.col-xs-12
            = f.label :current_password, t('users.fields.current_password'), id: "current-password-label", class: "input-group-addon", for: "current-password-field"
            = f.password_field :current_password, id: "current-password-field", class: "form-control", 'data-parsley-checkuserpassword' => '', 'data-parsley-trigger' => 'change', 'data-parsley-errors-container' => "#current-password-field-errors", 'data-parsley-required' => ''
          #current-password-field-errors.parsley-errors-container
          %hr
          .input-group.col-xs-12
            = f.label :password, t('users.fields.new_password'), id: "password-label", class: "input-group-addon", for: "password-field"
            = f.password_field :password, autocomplete: "off", id: "password-field", class: "form-control", 'data-parsley-minlength-message' => t('users.errors.password.min_length'), 'data-parsley-required' => '', 'data-parsley-minlength' => "6", 'data-parsley-trigger' => 'change', 'data-parsley-errors-container' => "#password-field-errors"
          #password-field-errors.parsley-errors-container
          %br
          .input-group.col-xs-12
            = f.label :password_confirmation, t('users.fields.password_confirmation'), id: "password-confirmation-label", class:"input-group-addon", for: "password-confirmation-field"
            = f.password_field :password_confirmation, autocomplete: "off", id: "password-confirmation-field", class: "form-control", placeholder: "#{t('users.placeholders.password_confirmation') }", 'data-parsley-equalto' => "#password-field", 'data-parsley-trigger' => 'change', 'data-parsley-errors-container' => "#password-confirmation-field-errors", 'data-parsley-equalto-message' => "#{t('users.errors.password_confirmation.match_password')}", 'data-parsley-required' => ''
          #password-confirmation-field-errors.parsley-errors-container
        .modal-footer.center
          = f.submit t('users.password_modal.title'), id: "modal-submit-button", class: "modal-submit-button"
:css
  #change-password-modal {
    margin-top: 100px;
  }

:javascript
  $(document).ready(function() {
    setUpNewPasswordSubmit();
    validatePasswordConfirmationOnPasswordValidate();
  });

  function setUpNewPasswordSubmit() {
    $(document).bind("ajax:success", function(e, data, status, xhr) {
      if(data.success){
        // If update failed, but return was success, password must have been blank.
        if(!data.update) { addErrors(["New password can't be blank"]); }
        else {
          addSuccess("Successfully updated password!", afterAddSuccess );
          removeParsleyValidationClasses();
        }
      }
      else {
        // Convert errors to array
        errors =  data.errors.substr(0, data.errors.length - 1).substr(1).replace(/"/g, "").split(',');
        addErrors(errors, "#change-password-form_errors");
      }
    });
  }

  function afterAddSuccess() {
    $("#change-password-modal").modal('hide');
    $("#change-password-form_errors").html("");
    $("#current-password-field").val("");
    $("#password-field").val("");
    $("#password-confirmation-field").val("");
  }